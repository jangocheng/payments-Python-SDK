# coding: utf-8

"""
    Payments API Gateway

    This is an internal payments API gateway for Chamaconekt Kenya 

    OpenAPI spec version: 0.1
    Contact: ondengew@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class B2CPayload1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'command_id': 'str',
        'initiator_name': 'str',
        'occasion': 'str',
        'party_a': 'float',
        'party_b': 'float',
        'queue_time_out_url': 'str',
        'remarks': 'str',
        'result_url': 'str',
        'security_credential': 'str'
    }

    attribute_map = {
        'amount': 'Amount',
        'command_id': 'CommandID',
        'initiator_name': 'InitiatorName',
        'occasion': 'Occasion',
        'party_a': 'PartyA',
        'party_b': 'PartyB',
        'queue_time_out_url': 'QueueTimeOutURL',
        'remarks': 'Remarks',
        'result_url': 'ResultURL',
        'security_credential': 'SecurityCredential'
    }

    def __init__(self, amount=None, command_id=None, initiator_name=None, occasion=None, party_a=None, party_b=None, queue_time_out_url=None, remarks=None, result_url=None, security_credential=None):
        """
        B2CPayload1 - a model defined in Swagger
        """

        self._amount = None
        self._command_id = None
        self._initiator_name = None
        self._occasion = None
        self._party_a = None
        self._party_b = None
        self._queue_time_out_url = None
        self._remarks = None
        self._result_url = None
        self._security_credential = None

        self.amount = amount
        self.command_id = command_id
        self.initiator_name = initiator_name
        self.occasion = occasion
        self.party_a = party_a
        self.party_b = party_b
        self.queue_time_out_url = queue_time_out_url
        self.remarks = remarks
        self.result_url = result_url
        self.security_credential = security_credential

    @property
    def amount(self):
        """
        Gets the amount of this B2CPayload1.
        The amount been transacted

        :return: The amount of this B2CPayload1.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this B2CPayload1.
        The amount been transacted

        :param amount: The amount of this B2CPayload1.
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def command_id(self):
        """
        Gets the command_id of this B2CPayload1.
        Unique command for each transaction type

        :return: The command_id of this B2CPayload1.
        :rtype: str
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """
        Sets the command_id of this B2CPayload1.
        Unique command for each transaction type

        :param command_id: The command_id of this B2CPayload1.
        :type: str
        """
        if command_id is None:
            raise ValueError("Invalid value for `command_id`, must not be `None`")
        allowed_values = ["SalaryPayment", "BusinessPayment", "PromotionPayment"]
        if command_id not in allowed_values:
            raise ValueError(
                "Invalid value for `command_id` ({0}), must be one of {1}"
                .format(command_id, allowed_values)
            )

        self._command_id = command_id

    @property
    def initiator_name(self):
        """
        Gets the initiator_name of this B2CPayload1.
        The name of the initiator initiating the request

        :return: The initiator_name of this B2CPayload1.
        :rtype: str
        """
        return self._initiator_name

    @initiator_name.setter
    def initiator_name(self, initiator_name):
        """
        Sets the initiator_name of this B2CPayload1.
        The name of the initiator initiating the request

        :param initiator_name: The initiator_name of this B2CPayload1.
        :type: str
        """
        if initiator_name is None:
            raise ValueError("Invalid value for `initiator_name`, must not be `None`")

        self._initiator_name = initiator_name

    @property
    def occasion(self):
        """
        Gets the occasion of this B2CPayload1.
        Optional Parameter

        :return: The occasion of this B2CPayload1.
        :rtype: str
        """
        return self._occasion

    @occasion.setter
    def occasion(self, occasion):
        """
        Sets the occasion of this B2CPayload1.
        Optional Parameter

        :param occasion: The occasion of this B2CPayload1.
        :type: str
        """
        if occasion is None:
            raise ValueError("Invalid value for `occasion`, must not be `None`")

        self._occasion = occasion

    @property
    def party_a(self):
        """
        Gets the party_a of this B2CPayload1.
        Organization /MSISDN sending the transaction

        :return: The party_a of this B2CPayload1.
        :rtype: float
        """
        return self._party_a

    @party_a.setter
    def party_a(self, party_a):
        """
        Sets the party_a of this B2CPayload1.
        Organization /MSISDN sending the transaction

        :param party_a: The party_a of this B2CPayload1.
        :type: float
        """
        if party_a is None:
            raise ValueError("Invalid value for `party_a`, must not be `None`")

        self._party_a = party_a

    @property
    def party_b(self):
        """
        Gets the party_b of this B2CPayload1.
        MSISDN sending the transaction

        :return: The party_b of this B2CPayload1.
        :rtype: float
        """
        return self._party_b

    @party_b.setter
    def party_b(self, party_b):
        """
        Sets the party_b of this B2CPayload1.
        MSISDN sending the transaction

        :param party_b: The party_b of this B2CPayload1.
        :type: float
        """
        if party_b is None:
            raise ValueError("Invalid value for `party_b`, must not be `None`")

        self._party_b = party_b

    @property
    def queue_time_out_url(self):
        """
        Gets the queue_time_out_url of this B2CPayload1.
        The path that stores information of time out transaction

        :return: The queue_time_out_url of this B2CPayload1.
        :rtype: str
        """
        return self._queue_time_out_url

    @queue_time_out_url.setter
    def queue_time_out_url(self, queue_time_out_url):
        """
        Sets the queue_time_out_url of this B2CPayload1.
        The path that stores information of time out transaction

        :param queue_time_out_url: The queue_time_out_url of this B2CPayload1.
        :type: str
        """
        if queue_time_out_url is None:
            raise ValueError("Invalid value for `queue_time_out_url`, must not be `None`")

        self._queue_time_out_url = queue_time_out_url

    @property
    def remarks(self):
        """
        Gets the remarks of this B2CPayload1.
        Comments that are sent along with the transaction. 

        :return: The remarks of this B2CPayload1.
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """
        Sets the remarks of this B2CPayload1.
        Comments that are sent along with the transaction. 

        :param remarks: The remarks of this B2CPayload1.
        :type: str
        """
        if remarks is None:
            raise ValueError("Invalid value for `remarks`, must not be `None`")

        self._remarks = remarks

    @property
    def result_url(self):
        """
        Gets the result_url of this B2CPayload1.
        The path that stores information of transactions

        :return: The result_url of this B2CPayload1.
        :rtype: str
        """
        return self._result_url

    @result_url.setter
    def result_url(self, result_url):
        """
        Sets the result_url of this B2CPayload1.
        The path that stores information of transactions

        :param result_url: The result_url of this B2CPayload1.
        :type: str
        """
        if result_url is None:
            raise ValueError("Invalid value for `result_url`, must not be `None`")

        self._result_url = result_url

    @property
    def security_credential(self):
        """
        Gets the security_credential of this B2CPayload1.
        Encrypted Credential of user getting transaction amount

        :return: The security_credential of this B2CPayload1.
        :rtype: str
        """
        return self._security_credential

    @security_credential.setter
    def security_credential(self, security_credential):
        """
        Sets the security_credential of this B2CPayload1.
        Encrypted Credential of user getting transaction amount

        :param security_credential: The security_credential of this B2CPayload1.
        :type: str
        """
        if security_credential is None:
            raise ValueError("Invalid value for `security_credential`, must not be `None`")

        self._security_credential = security_credential

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, B2CPayload1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    Payments API Gateway

    This is an internal payments API gateway for Chamaconekt Kenya 

    OpenAPI spec version: 0.1
    Contact: ondengew@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Error(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'detail': 'str',
        'id': 'str',
        'meta': 'object',
        'status': 'str'
    }

    attribute_map = {
        'code': 'code',
        'detail': 'detail',
        'id': 'id',
        'meta': 'meta',
        'status': 'status'
    }

    def __init__(self, code=None, detail=None, id=None, meta=None, status=None):
        """
        Error - a model defined in Swagger
        """

        self._code = None
        self._detail = None
        self._id = None
        self._meta = None
        self._status = None

        if code is not None:
          self.code = code
        if detail is not None:
          self.detail = detail
        if id is not None:
          self.id = id
        if meta is not None:
          self.meta = meta
        if status is not None:
          self.status = status

    @property
    def code(self):
        """
        Gets the code of this Error.
        an application-specific error code, expressed as a string value.

        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Error.
        an application-specific error code, expressed as a string value.

        :param code: The code of this Error.
        :type: str
        """

        self._code = code

    @property
    def detail(self):
        """
        Gets the detail of this Error.
        a human-readable explanation specific to this occurrence of the problem.

        :return: The detail of this Error.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """
        Sets the detail of this Error.
        a human-readable explanation specific to this occurrence of the problem.

        :param detail: The detail of this Error.
        :type: str
        """

        self._detail = detail

    @property
    def id(self):
        """
        Gets the id of this Error.
        a unique identifier for this particular occurrence of the problem.

        :return: The id of this Error.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Error.
        a unique identifier for this particular occurrence of the problem.

        :param id: The id of this Error.
        :type: str
        """

        self._id = id

    @property
    def meta(self):
        """
        Gets the meta of this Error.
        a meta object containing non-standard meta-information about the error.

        :return: The meta of this Error.
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """
        Sets the meta of this Error.
        a meta object containing non-standard meta-information about the error.

        :param meta: The meta of this Error.
        :type: object
        """

        self._meta = meta

    @property
    def status(self):
        """
        Gets the status of this Error.
        the HTTP status code applicable to this problem, expressed as a string value.

        :return: The status of this Error.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Error.
        the HTTP status code applicable to this problem, expressed as a string value.

        :param status: The status of this Error.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Error):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
